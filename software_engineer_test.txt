Basic Rules
===========
1. Review the questions in this file. Reply back via email with an estimated
   delivery date.
2. Answer each of the questions below.
3. Add your answer to each question to this file, in-line.
4. Send the final file back for review.
5. Bonus points if you add this initial file to your public git repo and share
   that repo with us so we can see how your answers progressed.
6. You may use external sources to help answer the questions (i.e. Google, etc),
   but you should always cite your sources in your comments. Learning from
   others is good. Plagiarism is bad.


Developer Test
==============

1.  What editor will you use to edit this file, and why?
		Ans:
		Will use default built-in editor in Github because it's easy and straightforward. 
		Alternatively I could use Notepad++ on my PC and updload the file to Github.

2.  Some of the questions will ask for a solution in the language of
    your choice.  What language(s) will you choose, and why?
    Ans:
		Java and C# are languages of my choice for this assignment.
		Reason is I am familiar with C family of languages. 
		A scripting language would work as well, but my personal choice are those two above.

3.  Explain the difference between testing and debugging.
		Ans:
		Testing is validation of the code according to the expected results.
		Debugging is troubleshooting of the code which failed testing or simply does not work.

4.  Consider a user querying a search engine.  Describe, in as much
    detail as you like, what happens between the user clicking the
    "submit" button and the display of the results.
		Ans:
		Assuming this use case applies to browser based search.
		Modern web interfaces usually built with JavaScript.
		So the button will have a listener registered on it that will call a function to navigate to a predefined URL.
		The http request is of type GET. The search parameters are appended to the URL as name/value pairs.
		The URL typically invokes a Web Server (e.g. Tomcat) endpoint which is defined either in web.xml file or via annotations in servlet or a Spring controller.
		Search parameters are passed to the service which invokes an operation to search data store for the passed in values.
		There are many search mechanisms available starting with straight forward DB SQL query to Elastic search to a fancy Google operations.
		With a DB search, one of the options would be to access DB via DAO objects thru Hibernate layer or a direct JDBC call.
		Results of DB query are returned in the form of a list which is converted from DAO to service format (e.g. JSON).
		The JSON is added to the http response body. The response header is set to text/json.
		Then the resonse is written to the output stream for the browser to consume.
		Browser expects the response to be in JSON format, so the JavaScript converts the JSON string (from the body) into a user friendly format to be displayed on the browser (typically as a list).
		The default web transport protocol is HTTP(s) which is transparent for this types of operations.
		There are other protocols (QUIC or IPFS) that are not widely supported by the browsers.

The two tables below describe relationships between employees,
managers, and departments (the columns employee.mgr_id and
department.head both refer to employee.id).  Use these definitions to
answer questions 5-10.  If you need to use any nonstandard functions or
syntax, be sure to name the DBMS that implements them.

employee                              department
----------------------------------    -----------------------
 id |        name        | mgr_id           name      | head
----+--------------------+--------    ----------------+------
  1 | Jonathan Archer    |     11      Operations     |   11
  2 | Christopher Pike   |     12      Marketing      |   12
  3 | James Kirk         |     13      IT             |   13
  4 | Jean-Luc Picard    |     14      HR             |   14
  5 | Kathryn Janeway    |     15      Sales          |   15
  6 | Ralph Wiggum       |     11
  7 | Troy McClure       |     12
  8 | Waylon Smithers    |     17
  9 | Edna Krabappel     |     16
 10 | Ned Flanders       |     15
 11 | Buffy Summers      |
 12 | Xander Harris      |
 13 | Willow Rosenberg   |
 14 | Rupert Giles       |
 15 | Oz Selbie          |
 16 | Dade Murphy        |     11
 17 | Kate Libby         |     13
 18 | Paul Cook          |     17
 19 | Emmanuel Goldstein |     16
 20 | Winston Smith      |     15
 21 | Thomas Anderson    |     15
 22 | Agent Smith        |     14
 23 | Malcolm Reynolds   |     14
 24 | River Tam          |     18
 25 | Jason Nesmith      |     18

5.  Write an SQL query to list the full name of every employee,
    alphabetized by first name.
    Ans:
    SELECT name FROM employee ORDER BY name
    
6.  Write an SQL query to list the full name of every employee,
    alphabetized by last name.
    Ans:
    	SELECT name as FullName
	FROM employee 
	ORDER BY PARSENAME(REPLACE(name,' ','.'),1)
	-- inspired by this https://stackoverflow.com/a/24320623
	-- drawback: it works only with up to 4 tokens 
7.  Write an SQL query to list the full name of every employee along
    with the full name of his/her manager.
    Ans:
    	SELECT emp.name AS Employee, mgr.name as Manager
	FROM employee emp, employee mgr
	WHERE emp.mgr_id = mgr.id
    
8.  Write an SQL query to list the full name of every employee in the
    Sales department.
    Ans:
    SELECT emp.name 
    FROM employee emp, department dep
    WHERE dep.name = 'Sales'
    AND emp.mgr_id = dep.head 
    
9.  Write an SQL query to list the full name of every employee along
    with name of his/her department.
    Ans:
    SELECT emp.name, dep.name 
    FROM employee emp, department dep
    WHERE emp.mgr_id = dep.head
    
10. Is there a better design for a database that supports the queries
    described in questions 5-9?  If so, describe it.  If not, why not?
    Ans:
    Yes, there are few improvements could be done.
    a. Separate employee.name into two columns FirstName, LastName
    b. Create a separate table for managers that references employee id as FK
    c. Department table would reference managers table
    
11. Write a function in the language of your choice that implements
    quicksort on an array of integers.
    Ans: see Sorter.java in the same repository.
    
12. Write a function in the language of your choice that performs
    binary search on a sorted array of integers.
    Ans: see Searcher.java in the same repository.
    
13. Write a function in the language of your choice that performs the query
    you wrote for question 7, and outputs the results as an HTML table.
    Ans: 
    I'll use MVP (minimum viable product) principle here, and will deliver exactly what's asked.
    Interpret requirements af following:
    Arbitrary DB and DB access mechanism to shield the app from DB implementation.
    Query is parameterized.
    Returns a string containing HTML representing a table of values.
    NOTE: it's a bad practice to keep multiple classes in one file, but for sake of ease of viewing I kept them like that.
    See DbToHtml.java
    
    p.s. Need to mention, the implementation tries to follow MVC pattern with IoC principle (injections) and code to interfaces.
    
14. Write a program in the language of your choice that takes a filename
    and a number N as arguments and retrieves and outputs the Nth line
    from the file.
15. Write the function from question 12 in a different language.
16. Write the program from question 14 in a different language (it can
    be the same language you used for #15, but it doesn't have to be).
